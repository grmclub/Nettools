
https://perlmaven.com/perl-split
https://perldoc.perl.org/functions
https://www.javatpoint.com/perl-string
https://docstore.mik.ua/orelly/perl4/cook/index.htm



-------------------------------------------------------------
http://perlmeme.org/howtos/perlfunc/split_function.html

* Using the Perl split() function

Example 1. Splitting on a character

  my $data = 'Becky Alcorn,25,female,Melbourne';

  my @values = split(',', $data);

  foreach my $val (@values) {
    print "$val\n";
  }

===============
  
 Example 2. Splitting on a string


  #!/usr/bin/perl

  use strict;
  use warnings;

  my $data = 'Bob the Builder~~~10:30am~~~1,6~~~ABC';

  my @values = split('~~~', $data);

  foreach my $val (@values) {
    print "$val\n";
  }

  exit 0;

===============

Example 3. Splitting on a pattern

  #!/usr/bin/perl

  use strict;
  use warnings;

  my $data = 'Home1Work2Cafe3Work4Home';

  # \d+ matches one or more integer numbers
  my @values = split(/\d+/, $data);

  foreach my $val (@values) {
    print "$val\n";
  }

  exit 0;
===============


Example 4. Splitting on an undefined value

 If you split on an undefined value, the string will be split on every character: 

  #!/usr/bin/perl

  use strict;
  use warnings;

  my $data = 'Becky Alcorn';

  my @values = split(undef,$data);

  foreach my $val (@values) {
    print "$val\n";
  }

===============
split on Multiple Characters

We can split a character at more than one delimiter. In the following example, we have split the string at (=) and (,).

    my $str = 'Vishal=18Sept,Anu=11May,Juhi=5Jul';    
    my @words = split /[=,]/, $str;    
    print "@words\n";    
  
===============
## split multiline strings

my @lines = split("\n", $str);
foreach my $line (@lines) {
...
}

perl -wMstrict -e
"my $filelike = qq{Line 1\nLine 2\nLine etc.\n};
 open my $fh, '<', \$filelike or die $!;
 while (<$fh>) {
   print
   }
 close $fh or die $!;  
-------------------------------------------------------------
* join Function

my @vowels = ('A', 'E', 'I');  
my $str = join ':', @vowels;  
print "$str\n";                      
my $data = join "-", $str, "vowels";  
print "$data\n";                       
$str = join '', @vowels, 'OU';  
print "$str\n";             

--output
A:E:I
A:E:I -vowels
AEIOU

-------------------------------------------------------------
**substr() Example

    use strict;  
    use warnings;  
    # Original string  
    my $originalstring = "Our site javaTpoint provides all type of tutorials";  
    print "$originalstring\n";  
    # Offset of 4  
    my $offset = substr($originalstring, 4);  
    print "$offset\n";  
    # Offset of 4, length 15  
    my $offsetlength = substr($originalstring, 4, 15);  
    print "$offsetlength\n";  
    # Replacing length with the new string  
    my $replacing = substr($originalstring, 4, 15, "one and only site");  
    print "$originalstring\n";  

**Replacing a string with another string, s///g

A string can be replaced with another string in two ways.
In first one, we have replaced Tigers with Lions which occurs single time in the string with s///.
In second one, we have replaced roses with flowers globally with s///g.

    my $var1 = "Tigers are big and frightening.";  
    $var1 =~ s/Tigers/Lions/;  
    print "$var1\n";  
    my $var2 = "Red roses are very popular. Yellow roses are less seen.";  
    $var2 =~ s/roses/flowers/g;  
    print "$var2\n";  

Output:

Lions are big and frightening.
Red flowers are very popular. Yellow flowers are less seen.

** Finding a match in the string, =~

Perl provides a match operator (=~) to find a substring from a string.

    my $var = "Tigers are big and frightening.";  
    if($var =~ /frightening/)  
    {  
        print "Matched\n";  
    }else{  
        print "Match not Found\n";  
    }  
    if($var =~ /biggest/)  
    {  
        print "Matched\n";  
    }else{  
        print "Match not Found\n";  
    }  

Output:

Matched
Match not Found


-------------------------------------------------------------
##Removing commas and dollar signs from a variable
$var =~ s/\,//g; # Substitute all commas with nothing
$var =~ s/\$//g; # Substitute all dollar signs with nothing


##Sort multiline strings
chomp @lines;
my @sorted = sort @lines;
my $names = join "\n", @sorted;


-------------------------------------------------------------
##String match

To find out if a string contains substring you can use the index function:

if (index($str, $substr) != -1) {
    print "$str contains $substr\n";
} 


## regex match
To search a string for a pattern match, use the match operator m//:

if ($string =~ m/pattern/) {  # the initial m is optional if "/" is the delimiter
    print "'$string' matches the pattern\n";       
}

https://perldoc.perl.org/perlrequick
https://perldoc.perl.org/perlre




-------------------------------------------------------------
##extract substring
$name = "alvin alexander";
$firstname = substr($name, 0, 5);
$lastname = substr($name, 6, 9);


-------------------------------------------------------------
##Core string functions: length, lc, uc, index, substr

my $str = 'HeLlo';
say lc $str;      # hello
say uc $str;      # HELLO
say length $str;  # 5

my $str = "The black cat climbed the green tree";
 
say index $str, 'cat';             # 10
say index $str, 'dog';             # -1
say index $str, "The";             # 0



-------------------------------------------------------------
##substring

my $str = "The black cat climbed the green tree";

#string, offset, length
say substr $str, 4, 5;  

    my $str = "The black cat climbed the green tree";
    say substr $str, 4, -11;                    # black cat climbed the

The 3rd parameter (the length) can also be a negative number. In that case it tells us the number of characters from the right hand side of the original string that should NOT be included. So the above means: count 4 from the left, 11 from the right, return what is between.

    my $str = "The black cat climbed the green tree";
    say substr $str, 14;                        # climbed the green tree

You can also leave out the 3rd (length) parameter which will mean: return all the characters starting from the 14th place till the end of the string.

    my $str = "The black cat climbed the green tree";
    say substr $str, -4;                        # tree
    say substr $str, -4, 2;                     # tr

We can also use a negative number in the offset, which will mean: count 4 from the right and start from there. It is the same as having length($str)-4 in the offset. 

-------------------------------------------------------------

-------------------------------------------------------------











