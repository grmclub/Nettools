tcpdump tutorial:
https://danielmiessler.com/p/tcpdump/


-------------------------------------------------------------
* Core Filters
==================================
##Filter tcp connection/teardown
tcp.flags.syn ==1|| (tcp.flags.syn ==1 && tcp.flags.ack ==1) ||tcp.flags.fin ==1||tcp.flags.reset ==1

##Filter raw packets
tshark -r test.pcap -Y ‘frame contains “foo”’
tcpdump -r out.pcap -A|grep XXABC

##Conversion of erf to pcap
https://www.netresec.com/?page=Blog&month=2012-11&post=Convert-Endace-ERF-capture-files-to-PCAP

##pcap to erf
/usr/bin/dagconvert -T pcap:erf -i file.pcap -o file.erf
 
##erf to pcap
editcap -F libpcap -T ether -A "$(date -I) 09:00:00" -B "$(date -I) 09:10:00" xx.erf out.pcap


-A dumps ascii
-X dumps in hexdump

##tcpdump: Filter by IP/portrange
file=xx.pcap
IP=xxx.xxx.xxx.xxx
tcpdump -r $file "host $IP  or (vlan and host $IP) " -w ip.pcap

RANGE=
tcpdump -r $file "portrange $RANGE or (vlan and portrange $RANGE)" -w range.pcap   
tcpslice /var/sniffer/dump{5..8}*.pcap | tcpdump -r - "portrange 11003 or (vlan and portrange 11003)" -w xx.pcap

##ts Filter by port
tshark -r xx.pcap -Y "tcp.port == 24636"
-T fields -e eth.src -e eth.dst -e data 

===============================
##Exclude Retransmissions
tshark -r xx.pcap -Y “not tcp.analysis.retransmission” -T fields -e data
ws:
!(tcp.analysis.retransmission or tcp.analysis.fast_retransmission or tcp.analysis.duplicate_ack)

-o tcp.relative_sequence_numbers:FALSE
-Y “tcp.len > 0”
===============================
##Ascii/ hex dump
tcpdump -r out.pcap -A |grep -a XX
-A dumps ASCII
-X dumps output in Hex
-S : Print absolute sequence numbers. 
-t : Give human-readable timestamp output.
-tttt : Give maximally human-readable timestamp output

tshark -r xx.pcap -o data.show_as_text:TRUE -T fields -e data.text
===============================
##Split file into smaller files
tcpdump -r out.pcap -C 1024 -w capxx
tshark -r out.pcap -Y "frame.number >=1 && frame.number <=100" -w out.pcap

##Check tcp establish & teardown
tcp.flags.syn==1||(tcp.flags.syn==1 && tcp.flags.ack==1)||tcp.flags.fin==1||tcp.flags.reset==1
tshark -r xx.pcap -R "(tcp.flags.syn==1||(tcp.flags.syn==1 && tcp.flags.ack==1)||tcp.flags.fin==1||tcp.flags.reset==1) && tcp.len==0 && tcp.seq<10 \
-T fields \
-e frame.time \
-e tcp.seq \
-e ip.src  \
-e tcp.srcport \
-e ip.dst \
-e tcp.srcport \
-e col.Info | egrep 'SYN|ACK, ACK|ACK|RST|FIN'

##ws exclude retransmission
!(tcp.retransmission or tcp.analysis.fast_retransmission)
tcp.srcport ==10300 && !(tcp.retransmission or tcp.analysis.fast_retransmission)

##ws check frame contents
frame contains "XXYYZZ1234"

##ts convert payload to ascii with timestamp
https://ask.wireshark.org/question/26086/formatting-tshark-payload-output-with-timestamp/
tshark -r xx.pcap -T fields -e frame.time -e data| perl -ne 's/\s+$//; ($date,$hexstr) = split("\t"); print substr($date,13,8),"\t",(pack,"H",$hexstr),"\r\n";'
tshark -r xx.pcap -T fields -e frame.time -e data| perl -ne 's/\s+$//; ($date,$hexstr) = split("\t"); print substr($date, 13,8),"\t",(pack "H*", $hexstr), "\r\n";'

##Extract and hexify data
tshark -r $file -Tfields -e data|sed -e 's/^$/d'|sed 's/.\{2\}/& /g'
==================================
##Connectivity Filters

##Extract connectivity details of seq no.
file=xx.pcap
tshark -r $file \
-o tcp.relative_sequence_numbers:FALSE\
-T fields \
-E header=y  \
-E separator='|' \
-e frame.time \
-e tcp.seq \
-e ip.src  \
-e tcp.srcport \
-e ip.dst \
-e tcp.dstport \
-e col.Info

##decode by protocol
file=xx.pcap
port=11200
tshark -r $file \
-o tcp.relative_sequence_numbers:FALSE\
-o "soupbintcp.tcp.port:$port" \
-Y "tcp.port ==$port && tcp.flags.push ==1" \
-T fields \
-E header=y  \
-E separator='|' \
-e frame.time \
-e tcp.seq \
-e ip.src  \
-e tcp.srcport \
-e ip.dst \
-e tcp.dstport \
-e soupbintcp.packet_type -V -l

##Calc outgoing msgrate - soupintcp
file=xx.pcap
port=11200
tshark -r $file \
-o tcp.relative_sequence_numbers:FALSE\
-o "soupbintcp.tcp.port:$port" \
-Y "tcp.dstport ==$port && tcp.flags.push ==1" \
-T fields \
-E header=y  \
-E separator='|' \
-e frame.time_epoch \
-e tcp.seq \
-e ip.src  \
-e tcp.srcport \
-e ip.dst \
-e tcp.dstport \
-e soupbintcp.packet_type |awk -F'|' '{print $1}'|cut -c1-10|uniq -c > ${port}_msg_rate.csv
==================================
--TCP Connections

1.tshark -r $file -R "tcp.flags.syn == 1" -T fields -e frame.time_epoch -e ip.src -e ip.dst -e tcp.srcport -e tcp.dstport

frame.time_epoch
frame.time
eth.src
eth.dst


#tshark -r $file \
-Tfields  \
-E header=y  -E separator='|' \
-e frame.time_epoch \
-e frame.len \
-e ip.src  \
-e ip.dst \
-e tcp.srcport \
-e tcp.dstport \
-e frame.protocols \
-e _ws.col.Info

2. TCP Setup
    - setup syn
      tcp.flags.syn==1 && tcp.flags.ack==0

    - setup syn/ack
      tcp.flags.syn == 1

    - shows handshakes + extra acks
    tcp.flags.syn == 1 || tcp.flags == 0x0012 || tcp.flags == 0x0010

    -only handshakes
    (tcp.flags.syn==1 ) || (tcp.flags == 0x0010 && tcp.seq==1 && tcp.ack==1)


2. TCP Teardown
    - fin
      tcp.flags.fin==1 || tcp.flags.reset==1


3. TCP analysis
   tcp.analysis.flags
   !tcp
   
--Basic Filters
tcpslice /var/db/sniffer/dump{0..6}*.tcpdump | tcpdump -r - "host 10.65.2.116  or (vlan and host 10.65.2.116) " -w ww.pcap
tcpslice /var/db/sniffer/dump{5..8}*.tcpdump | tcpdump -r - "portrange 11003 or (vlan and portrange 11003)" -w xx.pcap

IP=
tcpslice *.tcpdump | tcpdump -r - "host $IP  or (vlan and host $IP) " -w ip.pcap

RANGE=
tcpslice *.tcpdump | tcpdump -r - "portrange $RANGE or (vlan and portrange $RANGE)" -w range.pcap   
-------------------------------------------------------------
*Get potocols in the packet
tshark -r test.cap -q -z io,phs

* Split Files by 1024MB -> 1GB
tcpdump -r "large_dump.pcap" -C 1024 -w capX
-------------------------------------------------------------
* ERF to pcap
https://www.netresec.com/?page=Blog&month=2012-11&post=Convert-Endace-ERF-capture-files-to-PCAP
https://www.thegeekstuff.com/2009/02/editcap-guide-11-examples-to-handle-network-packet-dumps-effectively/

#editcap -F libpcap -T ether erf-ethernet-example.erf erf-ethernet-example.pcap 

*Extract packets between a specific timeperiod using option -A and -B
# editcap -v -A "2009-02-11 11:26:30" -B "2009-02-11 11:27:00"  input_dump output_dump


ERF (Endace Record Format) is a proprietary binary format for captured network packets. An ERF File is simply one or more records concatenated, with no file header. This makes it conceptually simpler than pcap files, which it is not directly compatible with.

The Wireshark package (including mergecap, editcap, capinfos, tshark, wireshark etc) has the ability to read ERF Files and dissect the records. This functionality is split between wiretap (wtap/erf.c) and a dissector (epan/dissectors/packet-erf.c).

Because of this, editcap/mergecap/tshark/wireshark can read in an ERF File and output any format they support writing into, defaulting to pcap. The DLT you get will depend on the tool settings.

-------------------------------------------------------------
https://github.com/wuseman/tshark-cheatsheet
https://stackoverflow.com/questions/13810156/tshark-export-fix-messages
https://hackertarget.com/tshark-tutorial-and-filter-examples/

https://shantoroy.com/sre/sed-linux-command-for-log-extraction-and-analysis/
https://itecnote.com/tecnote/tshark-export-packet-info-from-pcap-to-cvs/

https://isc.sans.edu/diary/Packet+Tricks+with+xxd/10306
tshark -T fields -e data | xxd -r -p


-------------------------------------------------------------
* Show all protocols
    tshark -r testX.pcap -d lbtrm -ta
    tshark -G protocols
    tshark -G fields

    -G [fields|protocols|values|decodes|defaultprefs|currentprefs]

-------------------------------------------------------------



-------------------------------------------------------------

-------------------------------------------------------------


-------------------------------------------------------------






