##system information

##core dump pattern
cat /proc/sys/kernel/core_pattern

##max limits
sysctl -a | grep threads-max
ulimit -a | grep "stack size"
cat /proc/sys/kernel/threads-max
cat /proc/sys/kernel/pid-max

--threads count
ls /proc/<pid>/task | wc -l
ps hH p <PID> | wc -l    #H: Thread mode. This will show information about threads.
cat /proc/<pid>/status| grep Threads

--tcp window scaling
cat /proc/sys/net/ipv4/tcp_window_scaling 
To enable TCP window scaling temporarily, run the following command:
$ sysctl net.ipv4.tcp_window_scaling=1 
Here is how to enable it permanently:
$ echo net.ipv4.tcp_window_scaling=1 \ > /etc/sysctl.d/50-tcp-window-scaling.conf \ && sysctl --system

##HW Info
HW_INFO="cat /sys/devices/virtual/dmi/id/product_name"
CPU_INFO="lscpu|egrep 'Arch|Core|Socket|Model'|paste -d';' - - - -|tr -s ' '"
MEM_INFO="free -h|grep Mem|awk '{print \$1,\$2}'"
NET_INFO="lspci|grep Ethernet"
DISK_INFO="lsblk -d -o NAME,SERIAL,SIZE"
OS_INFO="lsb_release -a|grep Desc"; #cat /proc/version #cat /etc/os-release #cat /etc/issue

-------------------------------------------------------------
##Display the top ten running processes - sorted by memory usage
ps aux | sort -nk +4 | tail
ps aux –sort=%mem,%cpu
ps -eo size.command --sort -size|head
top -b -o +%MEM|head -15

--cpu
ps -aux --sort -pcpu|pr -TW 256|head

--mem
ps -aux --sort -rss|pr -TW 256|head 
ps -eo pid,ppid,%mem,%cpu,cmd,comm --sort=-%mem|head 
top -o %MEM
top -o %CPU| head 

--use
echo "rss,pid,pcpu,pmem,user,args"
ps -eo rss,pid=,pcpu=,pmem=,user=,args=, |sort -b -nrk3|pr -TW 256|head

##Watch CPU Processes
watch -n 1 'ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head'
-------------------------------------------------------------
##check processes by memory/cpu
top -o %MEM

--sort by mem & cpu
*top -> shif+m, shift+t
ps aux --sort -rss
ps aux --sort -pcpu

##The difference between VIRT, RES and SHR:

VIRT stands for the virtual size of a process, which is the sum of memory it is actually using, memory it has mapped into itself (for instance the video card's RAM for the X server), files on disk that have been mapped into it (most notably shared libraries), and memory shared with other processes. VIRT represents how much memory the program is able to access at the present moment.

RES stands for the resident size, which is an accurate representation of how much actual physical memory a process is consuming. (This also corresponds directly to the %MEM column)

SHR indicates how much of the VIRT size is actually sharable memory or libraries. In the case of libraries, it does not necessarily mean that the entire library is resident. For example, if a program only uses a few functions in a library, the whole library is mapped and will be counted in VIRT and SHR, but only the parts of the library file containing the functions being used will actually be loaded in and be counted under RES.
-------------------------------------------------------------
##Check CPU Usage from Linux

#top –i

This hides all the idle processes, making it easier to sort through the list.

To quit the top function, press the letter q on your keyboard.

Some other useful commands while top is running include:

    M – sort task list by memory usage
    P – sort task list by processor usage
    N – sort task list by process ID
    T – sort task list by run time
	
#top -u $USER	

#mpstat –P ALL
Use the following command to direct sar to monitor CPU usage at set intervals:

#Top memory consuming processes
ps aux --sort -rss |pr -TW 256|head -15

-------------------------------------------------------------
####Network Usage
 
##watch network Service Activity in Real-time
lsof -i

##Show apps that use internet connection at the moment. (Multi-Language)
lsof -P -i -n
-------------------------------------------------------------
##Server performance metrics
https://www.redhat.com/sysadmin/troubleshooting-slow-servers
https://www.site24x7.com/learn/linux/monitor-linux-server-performance.html
https://www.site24x7.com/learn/linux/cpu-run-queue-length.html
https://erravindrapawadia.medium.com/linux-troubleshooting-why-is-the-server-so-slow-c524e372973d

https://www.site24x7.com/learn/linux/context-switching.html
https://www.site24x7.com/learn/linux/disk-io-troubleshooting.html
https://www.site24x7.com/learn/linux/nfs-troubleshooting.html
https://www.site24x7.com/learn/linux/troubleshoot-high-io-wait.html
https://www.site24x7.com/learn/linux/network-performance-troubleshooting.html
https://www.site24x7.com/learn/linux/top-commands-for-sysadmins.html
https://www.site24x7.com/learn/linux/page-faults-memory-swapping.html
https://www.site24x7.com/learn/linux/context-switching.html


Several metrics can help monitor the three pillars of any server CPU,RAM,Disk IO
Some of these metrics are:
- CPU utilization: Percentage of CPU time to perform a task
- Load average: Number of processes running on the CPU over a while
- Uptime: Amount of time passed since the last reboot of the system
- Memory utilization: Memory percentage utilized
- Disk utilization: Percentage of the total disk space used
- I/O wait time: Percentage of the CPU time spent waiting for I/O operations

##Troubleshoot system slowness
##Cmd basics
free -h
top -o %CPU | head -n12

Another route to investigate slowness is see if system errors are getting kicked down into system log
dmesg
dmesg --time-format=iso  #  show timestamp
watch "dmesg | tail -20"

Here are more logs to examine
grep -i error /var/log/syslog
cat /var/log/syslog
cat  /var/log/kern.log 

##Basics Slow Response and System Lag
sudo apt-get install htop iotop

    Start a terminal, in it run htop
    Start another terminal, in it run iotop
    Start another terminal, it it run tail -f /var/log/kern.log

Wait until the lag occurs, then look at your three terminals :

    The first one will tell you if a process is hogging the processor
    The second one will tell you if your hard disk is being thrashed by a process.
    The third one will tell you if an event has occurred regarding your hardware.

---------------------------------------------------
##Top usage
The -b option is for batch mode and the -n option lets you control how many times top will update before it closes.

$ top -b -n 1 > top_output
https://www.site24x7.com/learn/linux/top-command.html



---------------------------------------------------
#Commands to monitor CPU run queue
sar -q 1

    runq-sz: Run queue length
    plist-sz: Number of tasks in the task list
    ldavg-1: System load average for the last minute
    ldavg-5: System load average for the last five minutes
    ldavg-15: System load average for the last 15 minutes
    blocked: Number of currently blocked tasks, waiting for I/O to complete
	
ps command includes the STAT column, which displays the state of each running process
The first letter of the STAT column value is the state of the process, where S stands for sleep and R stands for runnable.

/proc status file
cat /proc/126/status | grep State

iotop command will reveal the list of all processes using the I/O resources

---------------------------------------------------



-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
-------------------------------------------------------------
